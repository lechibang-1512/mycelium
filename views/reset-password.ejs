<%- include('./partials/head', {title: 'Reset Password'}) %>

<div class="container mt-5 login-container">
    <div class="row justify-content-center">
        <div class="col-md-6 login-form">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Reset Password</h3>
                </div>
                <div class="card-body">
                    <% if (messages && messages.error) { %>
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <%= messages.error %>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    <% } %>
                    <% if (messages && messages.success) { %>
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <%= messages.success %>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    <% } %>
                    
                    <p class="mb-4">Please enter your new password. Make sure it meets the security requirements below.</p>
                    
                    <!-- Password Requirements -->
                    <div class="alert alert-info mb-4" role="alert">
                        <h6 class="alert-heading mb-2"><i class="fas fa-info-circle"></i> Password Requirements</h6>
                        <ul class="mb-0 small" id="passwordRequirements">
                            <li id="req-length">At least 8 characters long</li>
                            <li id="req-uppercase">Contains at least one uppercase letter (A-Z)</li>
                            <li id="req-lowercase">Contains at least one lowercase letter (a-z)</li>
                            <li id="req-number">Contains at least one number (0-9)</li>
                            <li id="req-special">Contains at least one special character (!@#$%^&*)</li>
                        </ul>
                    </div>
                    
                    <form id="resetPasswordForm" action="/reset-password/<%= token %>" method="POST" novalidate>
                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                        
                        <!-- New Password -->
                        <div class="mb-3">
                            <label for="password" class="form-label">New Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                                <input type="password" class="form-control" id="password" name="password" required>
                                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                    <i class="fas fa-eye" id="togglePasswordIcon"></i>
                                </button>
                                <div class="invalid-feedback">Please enter a valid password that meets all requirements.</div>
                            </div>
                            <!-- Password Strength Meter -->
                            <div class="progress mt-2" style="height: 5px;">
                                <div id="passwordStrength" class="progress-bar" role="progressbar" style="width: 0%"></div>
                            </div>
                            <small id="passwordStrengthText" class="text-muted"></small>
                        </div>
                        
                        <!-- Confirm Password -->
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm New Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                                <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                    <i class="fas fa-eye" id="toggleConfirmPasswordIcon"></i>
                                </button>
                                <div class="invalid-feedback">Passwords do not match.</div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" id="resetBtn">
                                <span id="resetBtnText">Reset Password</span>
                                <span id="resetBtnSpinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            </button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-center">
                    <a href="/login" class="text-decoration-none">Back to Login</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/js/form-validation.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const resetPasswordForm = document.getElementById('resetPasswordForm');
    const resetBtn = document.getElementById('resetBtn');
    const resetBtnText = document.getElementById('resetBtnText');
    const resetBtnSpinner = document.getElementById('resetBtnSpinner');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const passwordStrength = document.getElementById('passwordStrength');
    const passwordStrengthText = document.getElementById('passwordStrengthText');
    
    // Password requirements tracking
    const requirements = {
        length: { met: false, element: document.getElementById('req-length') },
        uppercase: { met: false, element: document.getElementById('req-uppercase') },
        lowercase: { met: false, element: document.getElementById('req-lowercase') },
        number: { met: false, element: document.getElementById('req-number') },
        special: { met: false, element: document.getElementById('req-special') }
    };

    // Toggle password visibility
    document.getElementById('togglePassword').addEventListener('click', function() {
        const type = passwordInput.type === 'password' ? 'text' : 'password';
        passwordInput.type = type;
        const icon = document.getElementById('togglePasswordIcon');
        icon.className = type === 'password' ? 'fas fa-eye' : 'fas fa-eye-slash';
    });

    document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
        const type = confirmPasswordInput.type === 'password' ? 'text' : 'password';
        confirmPasswordInput.type = type;
        const icon = document.getElementById('toggleConfirmPasswordIcon');
        icon.className = type === 'password' ? 'fas fa-eye' : 'fas fa-eye-slash';
    });

    // Real-time password validation
    passwordInput.addEventListener('input', function() {
        const password = this.value;
        let strength = 0;
        
        // Check length
        if (password.length >= 8) {
            requirements.length.met = true;
            strength += 20;
        } else {
            requirements.length.met = false;
        }
        
        // Check uppercase
        if (/[A-Z]/.test(password)) {
            requirements.uppercase.met = true;
            strength += 20;
        } else {
            requirements.uppercase.met = false;
        }
        
        // Check lowercase
        if (/[a-z]/.test(password)) {
            requirements.lowercase.met = true;
            strength += 20;
        } else {
            requirements.lowercase.met = false;
        }
        
        // Check number
        if (/[0-9]/.test(password)) {
            requirements.number.met = true;
            strength += 20;
        } else {
            requirements.number.met = false;
        }
        
        // Check special character
        if (/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
            requirements.special.met = true;
            strength += 20;
        } else {
            requirements.special.met = false;
        }
        
        // Update UI for each requirement
        Object.keys(requirements).forEach(key => {
            const req = requirements[key];
            if (req.met) {
                req.element.innerHTML = req.element.innerHTML.replace(/<i.*?<\/i>/, '') || req.element.innerHTML;
                req.element.innerHTML = '<i class="fas fa-check text-success"></i> ' + req.element.textContent.trim();
                req.element.classList.add('text-success');
                req.element.classList.remove('text-muted');
            } else {
                req.element.innerHTML = req.element.innerHTML.replace(/<i.*?<\/i>/, '') || req.element.innerHTML;
                req.element.classList.remove('text-success');
                req.element.classList.add('text-muted');
            }
        });
        
        // Update strength meter
        passwordStrength.style.width = strength + '%';
        passwordStrength.classList.remove('bg-danger', 'bg-warning', 'bg-success');
        
        if (strength <= 40) {
            passwordStrength.classList.add('bg-danger');
            passwordStrengthText.textContent = 'Weak password';
            passwordStrengthText.className = 'text-danger';
        } else if (strength <= 80) {
            passwordStrength.classList.add('bg-warning');
            passwordStrengthText.textContent = 'Medium password';
            passwordStrengthText.className = 'text-warning';
        } else {
            passwordStrength.classList.add('bg-success');
            passwordStrengthText.textContent = 'Strong password';
            passwordStrengthText.className = 'text-success';
        }
        
        // Validate confirm password if it has a value
        if (confirmPasswordInput.value) {
            validatePasswordMatch();
        }
    });

    // Confirm password validation
    confirmPasswordInput.addEventListener('input', validatePasswordMatch);

    function validatePasswordMatch() {
        if (confirmPasswordInput.value && passwordInput.value !== confirmPasswordInput.value) {
            confirmPasswordInput.setCustomValidity('Passwords do not match');
            confirmPasswordInput.classList.add('is-invalid');
        } else {
            confirmPasswordInput.setCustomValidity('');
            confirmPasswordInput.classList.remove('is-invalid');
            if (confirmPasswordInput.value) {
                confirmPasswordInput.classList.add('is-valid');
            }
        }
    }

    // Form submission
    resetPasswordForm.addEventListener('submit', function(event) {
        // Validate all requirements are met
        const allRequirementsMet = Object.values(requirements).every(req => req.met);
        if (!allRequirementsMet) {
            event.preventDefault();
            passwordInput.setCustomValidity('Password does not meet all requirements');
            passwordInput.classList.add('is-invalid');
            return false;
        } else {
            passwordInput.setCustomValidity('');
        }
        
        // Validate passwords match
        if (passwordInput.value !== confirmPasswordInput.value) {
            event.preventDefault();
            confirmPasswordInput.setCustomValidity('Passwords do not match');
            confirmPasswordInput.classList.add('is-invalid');
            return false;
        }
        
        // Show loading state
        resetBtnText.textContent = 'Resetting...';
        resetBtnSpinner.classList.remove('d-none');
        resetBtn.disabled = true;
        
        return true;
    });
});
</script>

<%- include('./partials/footer') %>

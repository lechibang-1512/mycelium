@startuml business-process-password-recovery
title Business Process: Password Recovery & Account Security

skinparam backgroundColor #f8fafc
skinparam activityBackgroundColor #dbeafe
skinparam activityBorderColor #2b6cb0
skinparam activityFontColor #0f172a

|User|
start
:Access Login Page;
:Click "Forgot Password";

|System|
:Display Password Recovery Form;
:Request email or username;

|User|
:Enter Email/Username;
:Submit Request;

|System|
:Validate Input;

if (Input Valid?) then (yes)
  :Query User Account;
  note right
    SELECT id, email, username, is_active
    FROM users
    WHERE email = ? OR username = ?
  end note
  
  if (User Found?) then (yes)
    
    :Check Account Status;
    
    if (Account Active?) then (yes)
      
      |System|
      :Generate Secure Token;
      note right
        Token generation:
        • Use crypto.randomBytes(32)
        • Hash with SHA-256
        • Store hashed version in DB
        • Set expiration (1 hour)
        • Token format: base64url encoded
      end note
      
      fork
        :Store Reset Token;
        :INSERT INTO password_reset_tokens
          (user_id, token_hash, 
           expires_at, ip_address, 
           user_agent, created_at)
          VALUES (?, ?, 
                  DATE_ADD(NOW(), INTERVAL 1 HOUR),
                  ?, ?, NOW());
        
      fork again
        :Log Security Event;
        :INSERT INTO security_events
          (user_id, event_type, 
           ip_address, user_agent, 
           details, created_at)
          VALUES (?, 'password_reset_requested',
                  ?, ?, ?, NOW());
        
      fork again
        :Invalidate Previous Tokens;
        :DELETE FROM password_reset_tokens
          WHERE user_id = ?
            AND token_hash != ?;
        note right
          Only keep most recent token
          to prevent multiple reset attempts
        end note
        
      end fork
      
      :Generate Reset Link;
      :link = `${BASE_URL}/reset-password?token=${token}`;
      
      :Prepare Email;
      note right
        Email contents:
        • Greeting with username
        • Reset link (clickable)
        • Expiration time (1 hour)
        • Security notice
        • Contact support info
        • "If you didn't request this..." warning
      end note
      
      :Send Password Reset Email;
      fork
        :Email to user's address;
      fork again
        :Log email sent;
      end fork
      
      :Display Success Message;
      note right
        Generic message:
        "If an account exists with that email,
        you will receive password reset 
        instructions shortly."
        
        (Generic to prevent user enumeration)
      end note
      
      |User|
      :Check Email;
      :Receive Reset Email;
      :Click Reset Link;
      
      |System|
      :Receive Reset Request;
      :Extract Token from URL;
      
      :Validate Token;
      fork
        :Hash Provided Token;
      fork again
        :Query Database;
        :SELECT user_id, expires_at
          FROM password_reset_tokens
          WHERE token_hash = ?;
      fork again
        :Check Expiration;
        :IF expires_at < NOW() THEN invalid;
      end fork
      
      if (Token Valid?) then (yes)
        
        :Display Password Reset Form;
        note right
          Form fields:
          • New Password
          • Confirm Password
          • (Token hidden in form)
        end note
        
        |User|
        :Enter New Password;
        :Confirm New Password;
        :Submit Form;
        
        |System|
        :Validate New Password;
        
        fork
          :Check Password Strength;
          note right
            Requirements:
            • Min 8 characters
            • Must include uppercase
            • Must include lowercase
            • Must include number
            • Must include special char
            • Not same as username
            • Not common password
          end note
          
        fork again
          :Check Passwords Match;
          
        fork again
          :Check Against Password History;
          note right
            Prevent reusing last 3 passwords
            (if password history enabled)
          end note
          
        end fork
        
        if (All Validations Pass?) then (yes)
          
          :Begin Transaction;
          
          fork
            :Hash New Password;
            :bcrypt with cost factor 12;
            
          fork again
            :Update User Password;
            :UPDATE users
              SET password = ?,
                  updated_at = NOW(),
                  failed_login_attempts = 0,
                  locked_until = NULL
              WHERE id = ?;
            
          fork again
            if (Password History Enabled?) then (yes)
              :Store in Password History;
              :INSERT INTO password_history
                (user_id, password_hash, created_at)
                VALUES (?, ?, NOW());
            endif
            
          fork again
            :Delete Used Reset Token;
            :DELETE FROM password_reset_tokens
              WHERE token_hash = ?;
            
          fork again
            :Delete All User's Reset Tokens;
            :DELETE FROM password_reset_tokens
              WHERE user_id = ?;
            
          fork again
            :Invalidate All Active Sessions;
            note right
              Force re-login on all devices
              for security after password change
            end note
            :Call sessionService.forceLogoutUser(userId);
            
          fork again
            :Log Security Event;
            :INSERT INTO security_events
              (user_id, event_type, 
               ip_address, user_agent, 
               details, risk_level, created_at)
              VALUES (?, 'password_reset_completed',
                      ?, ?, 'Password changed via reset',
                      'medium', NOW());
            
          fork again
            :Send Confirmation Email;
            note right
              Email to notify:
              • Password was changed
              • Time and IP address
              • "If this wasn't you, contact support"
              • Recommend checking account activity
            end note
            
          end fork
          
          :Commit Transaction;
          
          :Display Success Message;
          note right
            "Password successfully reset.
            You can now log in with your new password.
            
            All active sessions have been logged out
            for security."
          end note
          
          :Redirect to Login Page;
          :Add 3-second delay;
          
          |User|
          :Login with New Password;
          
          stop
          
        else (no)
          :Display Validation Errors;
          :Show specific requirements not met;
          :Keep form data (except password);
          
          |User|
          :Correct Errors;
          :Resubmit;
        endif
        
      else (no)
        
        if (Token Expired?) then (yes)
          :Display Expired Token Message;
          note right
            "This password reset link has expired.
            Please request a new one."
          end note
          
          :Offer "Request New Link" button;
          
          |User|
          if (Request New Link?) then (yes)
            :(Restart password recovery process);
          else (no)
            :Return to Login;
            stop
          endif
          
        else (Token Invalid)
          :Display Invalid Token Message;
          note right
            "This password reset link is invalid.
            It may have already been used."
          end note
          
          :Log Suspicious Activity;
          note right
            Multiple invalid token attempts
            could indicate:
            • Token tampering
            • Brute force attempt
            • Replay attack
          end note
          
          :Offer to Request New Link;
          stop
        endif
      endif
      
    else (no)
      :Log Attempt on Inactive Account;
      :Display Generic Message;
      note right
        Don't reveal that account is inactive
        to prevent user enumeration
      end note
      
      stop
    endif
    
  else (no)
    :Log Unknown Email/Username Attempt;
    note right
      Track for:
      • User enumeration attempts
      • Fishing for valid accounts
      • Potential security scanning
    end note
    
    :Display Generic Success Message;
    note right
      Still show success message
      to prevent user enumeration attacks
      
      "If an account exists with that email,
      you will receive password reset 
      instructions shortly."
    end note
    
    stop
  endif
  
else (no)
  :Display Input Errors;
  :Show field-specific errors;
  
  |User|
  :Correct Input;
  :Resubmit;
endif

@enduml
